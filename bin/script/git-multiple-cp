#!/bin/bash

if [[ -z $1 ]] || [[ -z $2 ]]; then
  cat << EOF
Usage: git-multiple-cp <branch> <grep_pattern>
- branch: The branch you want to cherry pick from
- grep_pattern: The grep pattern to be used to search for commits
EOF
  exit 1
fi

if [[ ! $(fzf --version) ]]; then
  echo "Error cannot find 'fzf'; use 'brew install fzf'"
  exit 1
fi

if [[ ! $(git config --get merge.tool) ]]; then
  cat << EOF
It is recommended to set up the git mergetool config.
For example use 'git config --global merge.tool vim' to setup vim as the default merge editor.
For vscode use the following two commands: 
  - git config --global merge.tool vscode
  - git config --global mergetool.vscode.cmd 'code --wait --merge $REMOTE $LOCAL $BASE $MERGED'
EOF
fi



branch=$1
grep_string=$2

git log $branch --reverse --since="2 year ago" --format=format:"%H [%an\] %s (%ai)" -E -i --grep $grep_string | fzf -m | tee cherry-picked-commits.txt | cut -d' ' -f1 | tr '\n' ' ' | sed 's/ $//' | xargs git cherry-pick -m1
cherry_pick_success=$?
while [[ $cherry_pick_success -ne 0 ]]; do
  git mergetool &
  while [ -n "$(git diff --name-only --diff-filter=U)" ];do
    sleep 5
  done
  read -p "All conflict resolved, [c]ontinue(default), [s]kip or [a]bort?" continue

  if [[ $continue == "a" ]]; then
    echo "Abort"
    git cherry-pick --abort
    cherry_pick_success=$?
  elif [[ $continue == "s" ]]; then
    echo "Skip"
    git cherry-pick --skip
    cherry_pick_success=$?
  else
    echo "Continue"
    git cherry-pick --continue --no-edit
    cherry_pick_success=$?
  fi
done
